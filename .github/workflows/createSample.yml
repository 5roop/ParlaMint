# This is a basic workflow to help you get started with Actions

name: Create sample files

# Controls when the action will run. 
on:

  pull_request:
    branches: [ main , main_test ]
    types: [closed, synchronize] # synchronize is temporary for debugging

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Changes:
    runs-on: ubuntu-latest
    outputs:
      parla_process:  '${{ steps.detect-changes.outputs.parla_process }}'
    steps:
      - name: Checkout ParlaMint
        uses: actions/checkout@v2
        with:
          path: ParlaMint
          fetch-depth: 2 # when called a pull_request - test is run on test merge -> full history is not needed to detect changes
      - name: Setup # initialize dependencies cache - used in next steps
        uses: ./ParlaMint/.github/actions/ParlaMintEnvSetup
      - name: ParlaMint status (Detect changed files and get list of parliaments that should be processed)
        id: detect-changes
        uses: ./ParlaMint/.github/actions/ParlaMintStatus

  # Creates sample files and commits them
  CreateSample:
    needs: [Changes]
    runs-on: ubuntu-latest
    ## TEMPORARY SKIP if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    steps:
      - name: Checkout ParlaMint
        uses: actions/checkout@v2
        with:
          path: ParlaMint
      - name: Setup
        uses: ./ParlaMint/.github/actions/ParlaMintEnvSetup
        with:
          repo_token: ${{secrets.GITHUB_TOKEN}}
      - name: Run Parliaments ${{needs.Changes.outputs.parla_process}}
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          for parla in $(jq -r '.[]' <<< '${{needs.Changes.outputs.parla_process}}' ); do
            echo "::group::Processing ParlaMint-$parla"
            DIR="${{env.SAMPLE_DIR}}/$parla"
            mkdir $DIR
            echo "::notice::Cleaning old sample files [$parla]"
            rm ParlaMint-$parla/ParlaMint-*.{txt,tsv,conllu,vert}
            echo "::notice::New sample files [$parla] TEXT"
            java -jar $GITHUB_WORKSPACE/Saxon.jar outDir=$DIR revRespPers='GitHub Action' -xsl:${{env.SAMPLE_SCRIPT}} ParlaMint-$parla/ParlaMint-$parla.xml
            echo "::notice::CONVERT to text and metadata"
            Scripts/parlamintp-tei2text.pl $DIR $DIR
            echo "::notice::New sample files [$parla] ANNOTATED"
            if [ -f "ParlaMint-$parla/ParlaMint-$parla.ana.xml" ] ; then
              java -jar $GITHUB_WORKSPACE/Saxon.jar outDir=$DIR revRespPers='GitHub Action' -xsl:${{env.SAMPLE_SCRIPT}} ParlaMint-$parla/ParlaMint-$parla.ana.xml
              echo "::notice::CONVERT to vert"
              Scripts/parlamintp-tei2vert.pl $DIR $DIR
              echo "::notice::CONVERT to conllu"
              Scripts/parlamintp2conllu.pl $DIR $DIR
            else
              echo "::warning::skipping annotated conversion - missing corpus root file"
            fi
            echo "::notice::Move new sample files to ParlaMint-$parla"
            mv $DIR/* ParlaMint-$parla/
            git add ParlaMint-$parla/ParlaMint-*.{txt,tsv,conllu,vert}
            echo "::notice::Changed files in ParlaMint-$parla"
            git diff --name-status ParlaMint-$parla/
            echo "::endgroup::"
          done
      - name: Commit new sample files ${{needs.Changes.outputs.parla_process}}
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          git status
          git commit -m "action: generating ParlaMint-${{needs.Changes.outputs.parla_process}} sample files with #${{github.event.number}}"
          # git push

