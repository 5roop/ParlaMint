# This is a basic workflow to help you get started with Actions

name: Create sample files

# Controls when the action will run. 
on:

  pull_request:
    branches: [ main , main_test ]
    types: [closed, synchronize] # synchronize is temporary for debugging

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Changes:
    runs-on: ubuntu-latest
    outputs:
      parla_process:  '${{ steps.detect-changes.outputs.parla_process }}'
    steps:
      - name: Checkout ParlaMint
        uses: actions/checkout@v2
        with:
          path: ParlaMint
          fetch-depth: 2 # when called a pull_request - test is run on test merge -> full history is not needed to detect changes
      - name: Setup # initialize dependencies cache - used in next steps
        uses: ./ParlaMint/.github/actions/ParlaMintEnvSetup
      - name: ParlaMint status (Detect changed files and get list of parliaments that should be processed)
        id: detect-changes
        uses: ./ParlaMint/.github/actions/ParlaMintStatus

  # Creates sample files and commits them
  CreateSample:
    needs: [Changes]
    runs-on: ubuntu-latest
    ## TEMPORARY SKIP if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    strategy:
      matrix:
        parla: ${{ fromJSON(needs.Changes.outputs.parla_process) }}
    steps:
      - name: Checkout ParlaMint
        uses: actions/checkout@v2
        with:
          path: ParlaMint
      - name: Setup
        uses: ./ParlaMint/.github/actions/ParlaMintEnvSetup
        with:
          repo_token: ${{secrets.GITHUB_TOKEN}}
          parla: ${{matrix.parla}}
      - name: Cleaning old sample files [${{matrix.parla}}]
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          rm ParlaMint-${{matrix.parla}}/ParlaMint-*.{txt,tsv,conllu,vert}
      - name: New sample files [${{matrix.parla}}] TEXT
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          java -jar $GITHUB_WORKSPACE/Saxon.jar outDir=${{env.SAMPLE_DIR}} revRespPers='GitHub Action' -xsl:${{env.SAMPLE_SCRIPT}} ParlaMint-${{matrix.parla}}/ParlaMint-${{matrix.parla}}.xml
          echo "CONVERT to text and metadata"
          Scripts/parlamintp-tei2text.pl ${{env.SAMPLE_DIR}} ${{env.SAMPLE_DIR}}
      - name: New sample files [${{matrix.parla}}] ANNOTATED
        if: ${{hashFiles(format('ParlaMint/ParlaMint-{0}/ParlaMint-{0}.ana.xml',matrix.parla)) != ''}}
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          java -jar $GITHUB_WORKSPACE/Saxon.jar outDir=${{env.SAMPLE_DIR}} revRespPers='GitHub Action' -xsl:${{env.SAMPLE_SCRIPT}} ParlaMint-${{matrix.parla}}/ParlaMint-${{matrix.parla}}.ana.xml
          echo "CONVERT to vert"
          Scripts/parlamintp-tei2vert.pl ${{env.SAMPLE_DIR}} ${{env.SAMPLE_DIR}}
          echo "CONVERT to conllu"
          Scripts/parlamintp2conllu.pl ${{env.SAMPLE_DIR}} ${{env.SAMPLE_DIR}}
      - name: Move new sample files to ParlaMint-${{matrix.parla}}
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          mv ${{env.SAMPLE_DIR}}/* ParlaMint-${{matrix.parla}}/
          git add ParlaMint-${{matrix.parla}}/ParlaMint-*.{txt,tsv,conllu,vert}
      - name: changed files [${{matrix.parla}}] by this job
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          git diff --name-status ParlaMint-${{matrix.parla}}/
      - name: diff [${{matrix.parla}}] by this job
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          git diff --color-words ParlaMint-${{matrix.parla}}/
      - name: Commit new sample files [${{matrix.parla}}]
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          git status
          git commit -m "action: generating ParlaMint-${{matrix.parla}} sample files with #${{github.event.number}}" ParlaMint-${{matrix.parla}}
          # git push

