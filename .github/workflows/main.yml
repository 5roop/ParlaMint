# This is a basic workflow to help you get started with Actions

name: Validate and create sample files

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main , actions ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Validate:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      #changed_languages_list: ${{ steps.detect-changes.outputs.changed_languages }}
      #changed_scripts: ${{steps.detect-changes.outputs.changed_scripts}} # number of changed files that are out of country directories
      #changed_files_list: ${{steps.detect-changes.outputs.changed_files}}
      languages_process:  '${{ toJSON(steps.detect-changes.outputs.languages_process) }}'
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Setup Java JDK
        uses: actions/setup-java@v1.4.3
        with:
          # The Java version to make available on the path. Takes a whole or semver Java version, or 1.x syntax (e.g. 1.8 => Java 8.x). Early access versions can be specified in the form of e.g. 14-ea, 14.0.0-ea, or 14.0.0-ea.28
          java-version: 1.15
          # The package type (jre, jdk, jdk+fx)
          java-package: jdk
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout jing
        uses: actions/checkout@v2
        with:
          repository: relaxng/jing-trang
          path: jing

      - name: Check java info
        run: |
          echo $(java -version)
          echo $JAVA_HOME

      - name: Build jing
        run: |
          cd $GITHUB_WORKSPACE/jing
          ./ant
      - name: Checkout ParlaMint
        uses: actions/checkout@v2
        with:
          path: ParlaMint
          fetch-depth: 0
      # Runs a set of commands using the runners shell
      #- name: Navigate to repository
      #  run: cd $GITHUB_WORKSPACE/ParlaMint
      - name: detect-changes
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          changed_files=$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }}) # not working when action is called from GitHub web interface
          changed_languages=$(echo "$changed_files"|grep 'ParlaMint-.*/'|sed 's/^ParlaMint-\([-A-Z]*\).*$/\1/'|sort|uniq|tr '\n' ' ')
          changed_scripts=$(echo "$changed_files"|grep -vc 'ParlaMint-.*')
          all_languages=$(echo ParlaMint-*|sed 's/ParlaMint-\([-A-Z]*\)/\1/g'|sort)
          languages_process=$(test -z "${changed_languages}" && echo "${all_languages}" || echo "${changed_languages}")
          languages_process=$(echo "[$languages_process]"|tr ' ' ',')
          echo "DEBUG: changed_files=${changed_files}"
          echo "DEBUG: changed_languages=${changed_languages}"
          echo "DEBUG: changed_scripts=${changed_scripts}"
          echo "DEBUG: all_languages=${all_languages}"
          echo "::set-output name=languages_process::${languages_process}"
          echo DEBUG
          echo ${{ toJSON(steps.detect-changes.outputs.languages_process) }}
          echo ${{steps.detect-changes.outputs.languages_process}}
      - name: Validate corpus root / text
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          ls ParlaMint-*/ParlaMint-*.xml | grep -v '.ana.' | grep -v '_' | xargs -t java -jar $GITHUB_WORKSPACE/jing/build/jing.jar -t Schema/ParlaMint-teiCorpus.rng 
      - name: Validate corpus component / text
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          ls ParlaMint-*/ParlaMint-*.xml | grep -v '.ana.' | grep    '_' | xargs -t java -jar $GITHUB_WORKSPACE/jing/build/jing.jar -t Schema/ParlaMint-TEI.rng
      - name: Validate corpus root / analysed
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          ls ParlaMint-*/ParlaMint-*.xml | grep    '.ana.' | grep -v '_' | xargs -t java -jar $GITHUB_WORKSPACE/jing/build/jing.jar -t Schema/ParlaMint-teiCorpus.ana.rng
      - name: Validate corpus component / analysed
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          ls ParlaMint-*/ParlaMint-*.xml | grep    '.ana.' | grep    '_' | xargs -t java -jar $GITHUB_WORKSPACE/jing/build/jing.jar -t Schema/ParlaMint-TEI.ana.rng
  # Creates sample files and commits them
  MakeSample:
    needs: Validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lang: ${{ fromJSON(needs.Validate.outputs.languages_process) }}
    steps:
      - name: Cleaning old sample files [${{matrix.lang}}] (the files that has been automatically created)
        run: |
          echo "TODO: create sample files"

