# This is a basic workflow to help you get started with Actions

name: Validate and create sample files

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main , actions ]
  pull_request:
    branches: [ main , main_test ]
    types: [opened, synchronize, reopened, closed]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Changes:
    runs-on: ubuntu-latest
    outputs:
      #changed_languages_list: ${{ steps.detect-changes.outputs.changed_languages }}
      #changed_scripts: ${{steps.detect-changes.outputs.changed_scripts}} # number of changed files that are out of country directories
      #changed_files_list: ${{steps.detect-changes.outputs.changed_files}}
      parla_process:  '${{ steps.detect-changes.outputs.parla_process }}'
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout ParlaMint
        uses: actions/checkout@v2
        with:
          path: ParlaMint
          fetch-depth: 2 # when called a pull_request - test is run on test merge -> full history is not needed to detect changes
      - name: Setup # initialize dependencies cache - used in next steps
        uses: ./ParlaMint/.github/actions/ParlaMintEnvSetup
      # Runs a set of commands using the runners shell
      #- name: Navigate to repository
      #  run: cd $GITHUB_WORKSPACE/ParlaMint
      - name: Detect changed files
        id: detect-changes
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          # changed_files=$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }}) # not working when action is called from GitHub web interface
          changed_files=$(git diff --name-only HEAD HEAD~1)
          changed_languages=$(echo "$changed_files"|grep 'ParlaMint-.*/'|sed 's/^ParlaMint-\([-A-Z]*\).*$/\1/'|sort|uniq|tr '\n' ' ')
          changed_scripts=$(echo "$changed_files"|grep -vc 'ParlaMint-.*')
          all_languages=$(echo ParlaMint-*|sed 's/ParlaMint-\([-A-Z]*\)/\1/g'|sort)
          parla_process=$(test -z "${changed_languages}" && echo "${all_languages}" || echo "${changed_languages}")
          parla_process=$(echo "[\"$parla_process\"]"|sed 's/  */","/g')
          echo "DEBUG: changed_files=${changed_files}"
          echo "DEBUG: changed_languages=${changed_languages}"
          echo "DEBUG: changed_scripts=${changed_scripts}"
          echo "DEBUG: all_languages=${all_languages}"
          echo ::set-output name=parla_process::${parla_process}

  ValidateCountries:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: Changes
    strategy:
      matrix:
        parla: ${{ fromJSON(needs.Changes.outputs.parla_process) }}
    steps:
      - name: Checkout ParlaMint
        uses: actions/checkout@v2
        with:
          path: ParlaMint
      - name: Setup
        uses: ./ParlaMint/.github/actions/ParlaMintEnvSetup
        with:
          country: ${{matrix.parla}}
      - name: Validate ParlaMint-${{matrix.parla}}
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          Scripts/validate-parlamint.pl Schema ParlaMint-${{matrix.parla}}
  # Creates sample files and commits them
  MakeSample:
    needs: [Changes, ValidateCountries]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        parla: ${{ fromJSON(needs.Changes.outputs.parla_process) }}
    steps:
      - name: Checkout ParlaMint
        uses: actions/checkout@v2
        with:
          path: ParlaMint
      - name: Setup
        uses: ./ParlaMint/.github/actions/ParlaMintEnvSetup
        with:
          repo_token: ${{secrets.GITHUB_TOKEN}}
          parla: ${{matrix.parla}}
      - name: Cleaning old sample files [${{matrix.parla}}]
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          rm ParlaMint-${{matrix.parla}}/ParlaMint-*.{txt,tsv,conllu,vert}
      - name: New sample files [${{matrix.parla}}] TEXT
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          java -jar $GITHUB_WORKSPACE/Saxon.jar outDir=${{env.SAMPLE_DIR}} revRespPers='GitHub Action' -xsl:${{env.SAMPLE_SCRIPT}} ParlaMint-${{matrix.parla}}/ParlaMint-${{matrix.parla}}.xml
          echo "CONVERT to text and metadata"
          Scripts/parlamintp-tei2text.pl ${{env.SAMPLE_DIR}} ${{env.SAMPLE_DIR}}
      - name: New sample files [${{matrix.parla}}] ANNOTATED
        if: ${{hashFiles(format('ParlaMint/ParlaMint-{0}/ParlaMint-{0}.ana.xml',matrix.parla)) != ''}}
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          java -jar $GITHUB_WORKSPACE/Saxon.jar outDir=${{env.SAMPLE_DIR}} revRespPers='GitHub Action' -xsl:${{env.SAMPLE_SCRIPT}} ParlaMint-${{matrix.parla}}/ParlaMint-${{matrix.parla}}.ana.xml
          echo "CONVERT to vert"
          Scripts/parlamintp-tei2vert.pl ${{env.SAMPLE_DIR}} ${{env.SAMPLE_DIR}}
          echo "CONVERT to conllu"
          Scripts/parlamintp2conllu.pl ${{env.SAMPLE_DIR}} ${{env.SAMPLE_DIR}}
      - name: Move new sample files to ParlaMint-${{matrix.parla}}
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          mv ${{env.SAMPLE_DIR}}/* ParlaMint-${{matrix.parla}}/
          git add ParlaMint-${{matrix.parla}}/ParlaMint-*.{txt,tsv,conllu,vert}
      - name: changed files [${{matrix.parla}}] by this job
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          git diff --name-status ParlaMint-${{matrix.parla}}/
      - name: diff [${{matrix.parla}}] by this job
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          git diff --color-words ParlaMint-${{matrix.parla}}/
      - name: Commit new sample files [${{matrix.parla}}]
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
        run: |
          cd $GITHUB_WORKSPACE/ParlaMint
          git status
          git commit -m "action: generating ParlaMint-${{matrix.parla}} sample files with #${{github.event.number}}" ParlaMint-${{matrix.parla}}
          # git push
  Validate:
    runs-on: ubuntu-latest
    needs: [ValidateCountries, MakeSample]
    steps:
      - run: echo Done!

